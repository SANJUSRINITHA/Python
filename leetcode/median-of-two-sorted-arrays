class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        A, B = nums1, nums2
        m, n = len(A), len(B)

        # Ensure A is the shorter array
        if m > n:
            A, B, m, n = B, A, n, m

        left = 0
        right = m

        while left <= right:
            i = (left + right) // 2
            j = (m + n + 1) // 2 - i

            Aleft = float('-inf') if i == 0 else A[i - 1]
            Aright = float('inf') if i == m else A[i]
            Bleft = float('-inf') if j == 0 else B[j - 1]
            Bright = float('inf') if j == n else B[j]

            if Aleft <= Bright and Bleft <= Aright:
                # Correct partition
                if (m + n) % 2 == 0:
                    return (max(Aleft, Bleft) + min(Aright, Bright)) / 2.0
                else:
                    return max(Aleft, Bleft)
            elif Aleft > Bright:
                right = i - 1
            else:
                left = i + 1
